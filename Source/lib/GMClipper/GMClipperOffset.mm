// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Objective-C Wrapper by Richard Moore (me@ricmoo.com), 2014.
//
// Original Clipper library by Angus Johnson (see clipper.hpp for more details).
//

#import "GMClipperOffset.h"

#include "clipper.hpp"
#import "GMPolygon+private.h"

// Convert between the C++ enums and our enums (maybe just do a cast?)
ClipperLib::JoinType convertJoinType(JoinType joinType) {
    switch (joinType) {
        case JoinTypeMiter:
            return ClipperLib::jtMiter;
        case JoinTypeRound:
            return ClipperLib::jtRound;
        case JoinTypeSquare:
            return ClipperLib::jtSquare;
        default:
            NSLog(@"Unknown Join Type: %d (something bad might happen)", joinType);
    }
    return ClipperLib::jtMiter;
}

// Convert between the C++ enums and our enums (maybe just do a cast?)
ClipperLib::EndType convertEndType(EndType endType) {
    switch (endType) {
        case EndTypeClosedLine:
            return ClipperLib::etClosedLine;
        case EndTypeClosedPolygon:
            return ClipperLib::etClosedPolygon;
        case EndTypeOpenButt:
            return ClipperLib::etOpenButt;
        case EndTypeOpenRound:
            return ClipperLib::etOpenRound;
        case EndTypeOpenSquare:
            return ClipperLib::etOpenSquare;
        default:
            NSLog(@"Unknown End Type: %d (something bad might happen)", endType);
    }
    return ClipperLib::etClosedLine;
}

@interface GMClipperOffset () {
    ClipperLib::ClipperOffset *_clipperOffset;
}

@end

@implementation GMClipperOffset

+ (id)clipperOffset {
    return [[self alloc] init];
}

+ (id)clipperOffsetWithMiterLimit: (float)miterLimit  {
    return [[self alloc] initWithMiterLimit:miterLimit];
}

+ (id)clipperOffsetWithArcTolerance: (float)arcTolerance  {
    return [[self alloc] initWithArcTolerance:arcTolerance];
}

+ (id)clipperWithMiterLimit: (float)miterLimit arcTolerance: (float)arcTolerance  {
    return [[self alloc] initWithMiterLimit:miterLimit arcTolerance:arcTolerance];
}


- (id)init {
    return [self initWithMiterLimit:2.0f arcTolerance:0.25f];
}

- (id)initWithMiterLimit:(float)miterLimit {
    return [self initWithMiterLimit:miterLimit arcTolerance:0.25];
}

- (id)initWithArcTolerance:(float)arcTolerance {
    return [self initWithMiterLimit:2.0f arcTolerance:arcTolerance];
}

- (id)initWithMiterLimit:(float)miterLimit arcTolerance:(float)arcTolerance {
    self = [super init];
    if (self) {
        _clipperOffset = new ClipperLib::ClipperOffset(miterLimit, arcTolerance);
    }
    return self;
}


- (void)dealloc {
    delete _clipperOffset;
}


#pragma mark - properties

- (void)setArcTolerance:(double)arcTolerance {
    _clipperOffset->ArcTolerance = arcTolerance;
}

- (double)arcTolerance {
    return _clipperOffset->ArcTolerance;
}

- (void)setMiterLimit:(double)miterLimit {
    _clipperOffset->MiterLimit = miterLimit;
}

- (double)miterLimit {
    return _clipperOffset->MiterLimit;
}

#pragma mark - Execution

- (NSArray*)executeDelta: (double)delta {
    ClipperLib::Paths solution;
    _clipperOffset->Execute(solution, delta);
    
    NSMutableArray *result = [NSMutableArray arrayWithCapacity:solution.size()];
    for(ClipperLib::Paths::iterator it = solution.begin(); it != solution.end(); ++it) {
        GMPolygon *polygon = [GMPolygon polygonFromPath:*it];
        [result addObject:polygon];
    }
    return result;
}

#pragma mark - Manipulation

- (void)addPolygon:(GMPolygon*)polygon joinType:(JoinType)joinType endType:(EndType)endType {
    _clipperOffset->AddPath(polygon.path, convertJoinType(joinType), convertEndType(endType));
}

- (void)addPolygons:(NSArray*)polygons joinType:(JoinType)joinType endType:(EndType)endType {
    for (GMPolygon *polygon in polygons) {
        _clipperOffset->AddPath(polygon.path, convertJoinType(joinType), convertEndType(endType));
    }
}

- (void)clear {
    _clipperOffset->Clear();
}

@end
